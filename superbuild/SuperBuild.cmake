find_package(Git)
if(NOT GIT_FOUND)
  message(ERROR "Cannot find git. git is required for Superbuild")
endif()

option( USE_GIT_PROTOCOL "If behind a firewall turn this off to use http instead." ON)
option( FORCE_ARMADILLO "Force to download and install Armadillo as dependencie." OFF)
option( FORCE_ITK "Force to download and install ITK as dependencie." OFF)
option( FORCE_ARRAYFIRE "Force to download and install ArrayFire as dependencie." OFF)

SET (git_protocol "git")

INCLUDE ( ExternalProject )

# Compute -G arg for configuring external projects with the same CMake gener    ator:
IF(CMAKE_EXTRA_GENERATOR)
  SET (gen "${CMAKE_EXTRA_GENERATOR} - ${CMAKE_GENERATOR}")
ELSE()
  SET (gen "${CMAKE_GENERATOR}" )
ENDIF()

SET (ep_common_args "-DCMAKE_BUILD_TYPE:STRING=Release"
)

SET (CMAKE_POSITION_INDEPENDENT_CODE ON)

FIND_PACKAGE(Armadillo 7.800 QUIET)
IF (ARMADILLO_FOUND AND NOT FORCE_ARMADILLO)
    MESSAGE("-- FOUND Armadillo. Not installing")
ELSE()
    IF (NOT EXISTS ${CMAKE_BINARY_DIR}/deps/Armadillo/lib)
        MESSAGE("-- NOT FOUND Armadillo. Installing")
        include( ${CMAKE_SOURCE_DIR}/superbuild/Armadillo.cmake )
    ENDIF()
ENDIF()

FIND_PACKAGE(ITK 4.12 QUIET)
IF (ITK_FOUND AND NOT FORCE_ITK)
    MESSAGE("-- FOUND ITK. Not Installing")
ELSE()
    IF (NOT EXISTS ${CMAKE_BINARY_DIR}/deps/zlib)
        include( ${CMAKE_SOURCE_DIR}/superbuild/ZLIB.cmake )
    ENDIF()
    IF (NOT EXISTS ${CMAKE_BINARY_DIR}/deps/ITK)
        MESSAGE("-- NOT FOUND ITK. Installing")
        include( ${CMAKE_SOURCE_DIR}/superbuild/ITK.cmake )
    ENDIF()
ENDIF()


FIND_PACKAGE(ArrayFire QUIET)
IF (ArrayFire_FOUND AND NOT FORCE_ARRAYFIRE)
    MESSAGE("-- FOUND ArrayFire. Not Installing")
ELSEIF (EXISTS ${CMAKE_BINARY_DIR}/deps/ArrayFire/lib)
    MESSAGE("-- FOUND deps ArrayFire. Not installing")
ELSE()

    MESSAGE("-- NOT FOUND ArrayFire. Installing")

    IF (NOT EXISTS ${CMAKE_BINARY_DIR}/deps/Lapack/lib)
        MESSAGE("-- NOT FOUND Lapack. Installing")
        INCLUDE (${CMAKE_SOURCE_DIR}/superbuild/Lapack.cmake )
    ELSE()
        add_custom_target(Lapack SOURCES ${CMAKE_BINARY_DIR}/deps/Lapack/lib)
        INCLUDE(${CMAKE_BINARY_DIR}/deps/Lapack/lib/cmake/lapack-3.7.0/lapack-config.cmake )
    ENDIF()
    SET (LAPACK_DIR ${CMAKE_BINARY_DIR}/deps/Lapack)
    SET (LAPACK_INCLUDE_DIR ${CMAKE_BINARY_DIR}/deps/Lapack/src/Lapack/LAPACKE/include) 
    SET (LAPACK_LIBRARIES ${PROJECT_BINARY_DIR}/deps/Lapack/lib/liblapack.so)
    SET (CBLAS_LIBRARIES ${PROJECT_BINARY_DIR}/deps/Lapack/lib/libcblas.so)

    IF (NOT EXISTS ${CMAKE_BINARY_DIR}/deps/FFTW/lib)
        MESSAGE("-- NOT FOUND FFTW. Installing")
        INCLUDE (${CMAKE_SOURCE_DIR}/superbuild/FFTW.cmake )
    ELSE()
        MESSAGE("-- FOUND deps FFTW. Not installing")
        add_custom_target(FFTW_F SOURCES ${CMAKE_BINARY_DIR}/deps/FFTW)
        add_custom_target(FFTW_D SOURCES ${CMAKE_BINARY_DIR}/deps/FFTW)
        SET (FFTW_ROOT ${CMAKE_BINARY_DIR}/deps/FFTW})
        SET (FFTW_USE_STATIC_LIBS ON)   
        SET (FFTW_INSTALL_DIR ${CMAKE_BINARY_DIR}/deps/FFTW)
    ENDIF()

    IF (NOT EXISTS ${CMAKE_BINARY_DIR}/deps/Boost/lib)
    MESSAGE("-- NOT FOUND Boost. Installing")
        INCLUDE (${CMAKE_SOURCE_DIR}/superbuild/Boost.cmake )
    ELSE()
        MESSAGE("-- FOUND deps Boost. Not installing")
        add_custom_target(Boost SOURCES ${CMAKE_BINARY_DIR}/deps/Boost)
    ENDIF()
    SET (Boost_DIR ${CMAKE_BINARY_DIR}/deps/Boost)
    SET (Boost_INCLUDE_DIR  ${CMAKE_BINARY_DIR}/deps/Boost/include)
    SET (Boost_LIBRARY_DIR  ${CMAKE_BINARY_DIR}/deps/Boost/lib/boost)


    IF (NOT EXISTS ${CMAKE_BINARY_DIR}/deps/OpenBLAS/lib)
    MESSAGE("-- NOT FOUND OpenBLAS. Installing")
        INCLUDE (${CMAKE_SOURCE_DIR}/superbuild/OpenBLAS.cmake )
    ELSE()
        MESSAGE("-- FOUND deps OpenBLAS. Not installing")
        add_custom_target(OpenBLAS SOURCES ${CMAKE_BINARY_DIR}/deps/OpenBLAS)
    ENDIF()
    SET (OpenBLAS_VERSION "0.2.19")
    SET (OpenBLAS_INCLUDE_DIRS ${CMAKE_BINARY_DIR}/deps/OpenBLAS/include)
    SET (OpenBLAS_LIBRARIES ${CMAKE_BINARY_DIR}/deps/OpenBLAS/lib/libopenblas.so)
    SET (CBLAS_INSTALL_DIR ${CMAKE_BINARY_DIR}/OpenBLAS)
    SET (CBLAS_INC_DIR "${CBLAS_INSTALL_DIR}/include" CACHE PATH "openblas include directory." FORCE)
    SET (CBLAS_LIBRARIES ${CMAKE_BINARY_DIR}/deps/OpenBLAS/lib/libopenblas.so) 

    IF (NOT EXISTS ${CMAKE_BINARY_DIR}/deps/ArrayFire/share/ArrayFire/cmake/ArrayFireConfig.cmake)
        include( ${CMAKE_SOURCE_DIR}/superbuild/ArrayFire.cmake )
    ENDIF()
ENDIF()
